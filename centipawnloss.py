# First we need to get the pgn file.
import sys
pgnfile = open(sys.argv[1], 'r')
pgn = pgnfile.read()

# Next we need to parse the pgn file for the evaluation scores.  The
# pgn files that this script is programed to parse are generated by
# the program Scid vs PC which encloses evaluation scores in curly
# brackets.  The variation should be stripped to ensure proper
# parsing.
def evalstring2int(es): # Turns evalstring into an integer
    digits = ""
    for char in es:
        if char in "1234567890-":
            digits += char
    return(int(digits))

def getevals(game):
    scores = []
    evalstring = ""
    recording = False
    for char in game:
        if recording:
            if char in "1234567890.-+\n":
                evalstring += char
            else:
                recording = False
                scores.append(evalstring2int(evalstring))
                evalstring = ""
        else:
            if char == "{":
                recording = True
    return(scores)

# Now we do the actual math.
def calcacl(evals):
    whiteloss = []
    blackloss = []
    white = True
    lastscore = 0
    for score in evals:
        if white:
            loss = lastscore - score
            if loss > 0:
                whiteloss.append(loss)
            else:
                whiteloss.append(0)
        else:
            loss = (lastscore - score) * -1
            if loss > 0:
                blackloss.append(loss)
            else:
                blackloss.append(0)
        white = not white
        lastscore = score

    avgwl = round(sum(whiteloss) / len(whiteloss))
    avgbl = round(sum(blackloss) / len(blackloss))
    return((avgwl, avgbl))

def gamespliter(pgndata):
    startingpoints = []
    point = 0
    beginstr = '[Event "'
    while point < len(pgndata):
        if pgndata[point:point + len(beginstr)] == beginstr:
            startingpoints.append(point)
        point += 1

    if len(startingpoints) == 1:
        return([pgndata])
    else:
        games = []
        counter = 0
        while counter < len(startingpoints) - 1:
            games.append(pgndata[startingpoints[counter]:startingpoints[counter + 1]])
            counter += 1
        games.append(pgndata[startingpoints[-1]:])
        return(games)

def parsepgntags(game):
    rawtags = []
    rawtag = ""
    intag = False
    for char in game:
        if intag:
            if char == ']':
                rawtags.append(rawtag)
                rawtag = ""
                intag = False
            else:
                rawtag += char
        else:
            if char == '[':
                intag = True

    tags = []
    for entry in rawtags:
        stage = 0
        tag = ""
        data = ""
        for char in entry:
            if stage == 0:
                if char != " ":
                    tag += char
                else:
                    stage += 1
            elif stage == 1:
                if char == '"':
                    stage += 1
            elif stage == 2:
                if char != '"':
                    data += char
                else:
                    tags.append((tag, data))

    return(tags)

def gettag(taglist, tag):
    for entry in taglist:
        if entry[0] == tag:
            return(entry[1])
    return("Tag not found")

players = []
def playeracl(player, acl):
    global players
    for entry in players:
        if entry[0] == player:
            entry[1].append(acl)
            return()
    players.append([player, [acl]])
    return()

def processgame(game):
    gametags = parsepgntags(game)
    gameevals = getevals(game)
    gameacl = calcacl(gameevals)
    whiteacl = gameacl[0]
    blackacl = gameacl[1]
    playeracl(gettag(gametags, "White"), whiteacl)
    playeracl(gettag(gametags, "Black"), blackacl)
    return

for game in gamespliter(pgn):
    processgame(game)
    acls = calcacl(getevals(game))
    whiteacl = acls[0]
    blackacl = acls[1]
    tags = parsepgntags(game)
    print("Round:", gettag(tags, "Round"))
    print("White:", gettag(tags, "White"))
    print("Black:", gettag(tags, "Black"))
    print("Result:", gettag(tags, "Result"))
    print("Average Centipawn Loss (ACL)")
    print("White ACL:", whiteacl)
    print("Black ACL:", blackacl)
    print("\n")

print("Normal centipawn loss accross all game in file")
for entry in players:
    print(entry[0] + ' -', round(sum(entry[1]) / len(entry[1])))
